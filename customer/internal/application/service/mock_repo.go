// Code generated by mockery v2.25.0. DO NOT EDIT.

package service

import (
	context "context"

	domain "github.com/fyerfyer/trade-refactor/customer/internal/application/domain"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetByName provides a mock function with given fields: ctx, customerName
func (_m *Repository) GetByName(ctx context.Context, customerName string) (*domain.Customer, error) {
	ret := _m.Called(ctx, customerName)

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Customer, error)); ok {
		return rf(ctx, customerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Customer); ok {
		r0 = rf(ctx, customerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type Repository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - customerName string
func (_e *Repository_Expecter) GetByName(ctx interface{}, customerName interface{}) *Repository_GetByName_Call {
	return &Repository_GetByName_Call{Call: _e.mock.On("GetByName", ctx, customerName)}
}

func (_c *Repository_GetByName_Call) Run(run func(ctx context.Context, customerName string)) *Repository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetByName_Call) Return(_a0 *domain.Customer, _a1 error) *Repository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByName_Call) RunAndReturn(run func(context.Context, string) (*domain.Customer, error)) *Repository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, c
func (_m *Repository) Save(ctx context.Context, c *domain.Customer) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - c *domain.Customer
func (_e *Repository_Expecter) Save(ctx interface{}, c interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", ctx, c)}
}

func (_c *Repository_Save_Call) Run(run func(ctx context.Context, c *domain.Customer)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Customer))
	})
	return _c
}

func (_c *Repository_Save_Call) Return(_a0 error) *Repository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(context.Context, *domain.Customer) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, c
func (_m *Repository) Update(ctx context.Context, c *domain.Customer) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - c *domain.Customer
func (_e *Repository_Expecter) Update(ctx interface{}, c interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, c)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, c *domain.Customer)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Customer))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, *domain.Customer) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
