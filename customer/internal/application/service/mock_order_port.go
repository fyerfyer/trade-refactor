// Code generated by mockery v2.25.0. DO NOT EDIT.

package service

import (
	context "context"

	order "github.com/fyerfyer/trade-dependency/dto/order"
	mock "github.com/stretchr/testify/mock"
)

// OrderPort is an autogenerated mock type for the OrderPort type
type OrderPort struct {
	mock.Mock
}

type OrderPort_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderPort) EXPECT() *OrderPort_Expecter {
	return &OrderPort_Expecter{mock: &_m.Mock}
}

// GetUnpaidOrder provides a mock function with given fields: ctx, req
func (_m *OrderPort) GetUnpaidOrder(ctx context.Context, req *order.GetUnpaidOrdersRequest) (*order.GetUnpaidOrdersResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *order.GetUnpaidOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetUnpaidOrdersRequest) (*order.GetUnpaidOrdersResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetUnpaidOrdersRequest) *order.GetUnpaidOrdersResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.GetUnpaidOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.GetUnpaidOrdersRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderPort_GetUnpaidOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnpaidOrder'
type OrderPort_GetUnpaidOrder_Call struct {
	*mock.Call
}

// GetUnpaidOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - req *order.GetUnpaidOrdersRequest
func (_e *OrderPort_Expecter) GetUnpaidOrder(ctx interface{}, req interface{}) *OrderPort_GetUnpaidOrder_Call {
	return &OrderPort_GetUnpaidOrder_Call{Call: _e.mock.On("GetUnpaidOrder", ctx, req)}
}

func (_c *OrderPort_GetUnpaidOrder_Call) Run(run func(ctx context.Context, req *order.GetUnpaidOrdersRequest)) *OrderPort_GetUnpaidOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.GetUnpaidOrdersRequest))
	})
	return _c
}

func (_c *OrderPort_GetUnpaidOrder_Call) Return(_a0 *order.GetUnpaidOrdersResponse, _a1 error) *OrderPort_GetUnpaidOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderPort_GetUnpaidOrder_Call) RunAndReturn(run func(context.Context, *order.GetUnpaidOrdersRequest) (*order.GetUnpaidOrdersResponse, error)) *OrderPort_GetUnpaidOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessItems provides a mock function with given fields: ctx, req
func (_m *OrderPort) ProcessItems(ctx context.Context, req *order.ProcessItemsRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.ProcessItemsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderPort_ProcessItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessItems'
type OrderPort_ProcessItems_Call struct {
	*mock.Call
}

// ProcessItems is a helper method to define mock.On call
//   - ctx context.Context
//   - req *order.ProcessItemsRequest
func (_e *OrderPort_Expecter) ProcessItems(ctx interface{}, req interface{}) *OrderPort_ProcessItems_Call {
	return &OrderPort_ProcessItems_Call{Call: _e.mock.On("ProcessItems", ctx, req)}
}

func (_c *OrderPort_ProcessItems_Call) Run(run func(ctx context.Context, req *order.ProcessItemsRequest)) *OrderPort_ProcessItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.ProcessItemsRequest))
	})
	return _c
}

func (_c *OrderPort_ProcessItems_Call) Return(_a0 error) *OrderPort_ProcessItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderPort_ProcessItems_Call) RunAndReturn(run func(context.Context, *order.ProcessItemsRequest) error) *OrderPort_ProcessItems_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessOrder provides a mock function with given fields: ctx, req
func (_m *OrderPort) ProcessOrder(ctx context.Context, req *order.ProcessOrderRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.ProcessOrderRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderPort_ProcessOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessOrder'
type OrderPort_ProcessOrder_Call struct {
	*mock.Call
}

// ProcessOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - req *order.ProcessOrderRequest
func (_e *OrderPort_Expecter) ProcessOrder(ctx interface{}, req interface{}) *OrderPort_ProcessOrder_Call {
	return &OrderPort_ProcessOrder_Call{Call: _e.mock.On("ProcessOrder", ctx, req)}
}

func (_c *OrderPort_ProcessOrder_Call) Run(run func(ctx context.Context, req *order.ProcessOrderRequest)) *OrderPort_ProcessOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.ProcessOrderRequest))
	})
	return _c
}

func (_c *OrderPort_ProcessOrder_Call) Return(_a0 error) *OrderPort_ProcessOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderPort_ProcessOrder_Call) RunAndReturn(run func(context.Context, *order.ProcessOrderRequest) error) *OrderPort_ProcessOrder_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewOrderPort interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderPort creates a new instance of OrderPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderPort(t mockConstructorTestingTNewOrderPort) *OrderPort {
	mock := &OrderPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
